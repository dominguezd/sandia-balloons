// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

@use "../colors";

$supportsNight: false !default;

.chroma {
	// Background
	color: colors.$light-font;
	background-color: rgba(colors.$white, .6);
	overflow-x: auto;

	@if $supportsNight {
		.night & {
			color: colors.$dark-font;
			background-color: rgba(colors.$black, .3);
		}
	}

	.chroma {
		background-color: transparent;
	}

	// Error
	.err {
		color: colors.$dark-red;
		@if $supportsNight {
			.night & {
				color: colors.$light-red;
			}
		}
	}

	// LineTableTD
	.lntd {
		vertical-align: top;
		padding: 0;
		margin: 0;
		border: 0;
		
		&:first-child {
			user-select: none
		}

		&:last-child {
			flex-grow: 1;
			padding-left: 1em;

			background-color: colors.$white;
			@if $supportsNight {
				.night & {
					background-color: colors.$black;
				}
			}
		}
	}

	// LineTable
	.lntable {
		border-spacing: 0;
		padding: 0;
		margin: 0;
		border: 0;
		width: auto;
		width: 100%;
		& > tbody > tr {
			display: flex;
		}
	}

	// LineHighlight
	.hl {
		display: block;
		width: 100%;
		color: colors.$light-font;
		@if $supportsNight {
			.night & {
				color: colors.$dark-font;
			}
		}
	}

	// LineNumbersTable
	.lnt {
		margin-right: .5em;
		padding: 0 .5em 0 .5em;
		color: colors.$light-font;
		display: block;
		@if $supportsNight {
			.night & {
				color: colors.$dark-font;
			}
		}
	}

	// LineNumbers
	.ln {
		margin-right: .5em;
		padding: 0 .5em 0 .5em;
		color: colors.$light-font;
		@if $supportsNight {
			.night & {
				color: colors.$dark-font;
			}
		}
	}

	// Keyword
	.k {
		font-weight: bold;
		color: colors.$dark-blue;
		@if $supportsNight {
			.night & {
				color: colors.$light-blue;
			}
		}
	}

	// KeywordConstant
	.kc {
		font-weight: bold;
		color: colors.$dark-blue;
		@if $supportsNight {
			.night & {
				color: colors.$light-blue;
			}
		}
	}

	// KeywordDeclaration
	.kd {
		font-weight: bold;
		color: colors.$dark-blue;
		@if $supportsNight {
			.night & {
				color: colors.$light-blue;
			}
		}
	}

	// KeywordNamespace
	.kn {
		font-weight: bold;
		color: colors.$dark-red;
		@if $supportsNight {
			.night & {
				color: colors.$light-red;
			}
		}
	}

	// KeywordPseudo
	.kp {
		font-weight: bold;
		color: colors.$dark-blue;
		@if $supportsNight {
			.night & {
				color: colors.$light-blue;
			}
		}
	}

	// KeywordReserved
	.kr {
		font-weight: bold;
		color: colors.$dark-blue;
		@if $supportsNight {
			.night & {
				color: colors.$light-blue;
			}
		}
	}

	// KeywordType
	.kt {
		font-weight: bold;
		color: colors.$dark-blue;
		@if $supportsNight {
			.night & {
				color: colors.$light-blue;
			}
		}
	}

	// NameAttribute
	.na {
		color: colors.$dark-yellow;
		@if $supportsNight {
			.night & {
				color: colors.$light-yellow;
			}
		}
	}

	// NameClass
	.nc {
		color: colors.$dark-yellow;
		@if $supportsNight {
			.night & {
				color: colors.$light-yellow;
			}
		}
	}

	// NameConstant
	.no {
		color: colors.$dark-blue;
		@if $supportsNight {
			.night & {
				color: colors.$light-blue;
			}
		}
	}

	// NameDecorator
	.nd {
		color: colors.$dark-yellow;
		@if $supportsNight {
			.night & {
				color: colors.$light-yellow;
			}
		}
	}

	// NameException
	.ne {
		color: colors.$dark-yellow;
		@if $supportsNight {
			.night & {
				color: colors.$light-yellow;
			}
		}
	}

		// NameFunction
	.nf {
		color: colors.$dark-yellow;
		@if $supportsNight {
			.night & {
				color: colors.$light-yellow;
			}
		}
	}

	// NameOther
	.nx {
		color: colors.$dark-yellow;
		@if $supportsNight {
			.night & {
				color: colors.$light-yellow;
			}
		}
	}

	// NameTag
	.nt {
		color: colors.$dark-red;
		@if $supportsNight {
			.night & {
				color: colors.$light-red;
			}
		}
	}

	// Literal
	.l {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralDate
	.ld {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralString
	.s {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringAffix
	.sa {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringBacktick
	.sb {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringChar
	.sc {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringDelimiter
	.dl {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringDoc
	.sd {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringDouble
	.s2 {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringEscape
	.se {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralStringHeredoc
	.sh {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringInterpol
	.si {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringOther
	.sx {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringRegex
	.sr {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringSingle
	.s1 {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralStringSymbol
	.ss {
		color: colors.$dark-green;
		@if $supportsNight {
			.night & {
				color: colors.$light-green;
			}
		}
	}

	// LiteralNumber
	.m {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralNumberBin
	.mb {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralNumberFloat
	.mf {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralNumberHex
	.mh {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralNumberInteger
	.mi {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralNumberIntegerLong
	.il {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// LiteralNumberOct
	.mo {
		color: colors.$dark-purple;
		@if $supportsNight {
			.night & {
				color: colors.$light-purple;
			}
		}
	}

	// Operator
	.o {
		color: colors.$dark-red;
		@if $supportsNight {
			.night & {
				color: colors.$light-red;
			}
		}
	}

	// OperatorWord
	.ow {
		color: colors.$dark-red;
		@if $supportsNight {
			.night & {
				color: colors.$light-red;
			}
		}
	}

	// Comment
	.c {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}

	// CommentHashbang
	.ch {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}

	// CommentMultiline
	.cm {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}

	// CommentSingle
	.c1 {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}

	// CommentSpecial
	.cs {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}

	// CommentPreproc
	.cp {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}

	// CommentPreprocFile
	.cpf {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}

	// GenericDeleted
	.gd {
		color: colors.$dark-red;
		@if $supportsNight {
			.night & {
				color: colors.$light-red;
			}
		}
	}

	// GenericEmph
	.ge {
		font-style: italic;
	}

	// GenericInserted
	.gi {
		color: colors.$dark-yellow;
		@if $supportsNight {
			.night & {
				color: colors.$light-yellow;
			}
		}
	}

	// GenericStrong
	.gs {
		font-weight: bold;
	}

	// GenericSubheading
	.gu {
		color: colors.$dark-brown;
		@if $supportsNight {
			.night & {
				color: colors.$light-brown;
			}
		}
	}
}
